LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
ENTITY ControlUnit IS
	PORT (
		opcode        : IN std_logic_vector(5 DOWNTO 0); -- instruction 31-26 -- this will also be sent direcly to ALU
		regDst        : OUT std_logic; -- 0 for immediate and LW/SW, 1 for register arith
		memRead       : OUT std_logic; -- 1 for reading memory
		memToRegister : OUT std_logic; -- 1 for memRead data goes to destination register else 0 for ALU result to destination register
		memWrite      : OUT std_logic; -- 1 for writing data
		ALUsrc        : OUT std_logic; -- 0 for second operand to be a register else 1 for second operand is immediate value (direct value offest for a mem address)
		regWrite      : OUT std_logic  -- 1 for computed result is written to destination register, in this project only 0 for SW 
	);
END ControlUnit;
ARCHITECTURE Behavioral OF ControlUnit IS
BEGIN
	PROCESS (opcode)
	BEGIN
		regWrite <= '0'; --Deassert for next command
		CASE opcode IS
		-- 1110: 14 diff instructions Addi, Andi, Ori, Slti, Add, Sub, And, Or, Slt, Xor, Sll, Srl, LW, SW
			WHEN "000001" to "000100" => -- Inst 1 - 4: Imediate Arithmetic 
				regDst        <= '1';
				memRead       <= '0';
				memToRegister <= '0';
				memWrite      <= '0';
				ALUsrc        <= '0';
				regWrite      <= '1' AFTER 10 ns;
			when "000101" to "1100" -- Inst 5 - 12: Register Arithmetic (Shifts will be register arithmetic here)
 				regDst        <= '0';
				memRead       <= '0';
				memToRegister <= '0';
				memWrite      <= '0';
				ALUsrc        <= '0';
				regWrite      <= '1' AFTER 10 ns;
			WHEN "001101" => -- Inst: 13 LW
				regDst        <= '0';
				memRead       <= '1';
				memToRegister <= '1';
				memWrite      <= '0';
				ALUsrc        <= '1';
				regWrite      <= '1' AFTER 10 ns;
			WHEN "001110" => -- Inst: 14 SW
				regDst        <= '0';
				memRead       <= '0';
				memToRegister <= 'X'; -- doesn't matter
				memWrite      <= '1';
				ALUsrc        <= '1';
				regWrite      <= '0' AFTER 10 ns;
			WHEN OTHERS => NULL; --left here in case others are added
				regDst        <= '0';
				jump          <= '0';
				branch        <= '0';
				memRead       <= '0';
				memToRegister <= '0';
				ALUop         <= "00";
				memWrite      <= '0';
				ALUsrc        <= '0';
				regWrite      <= '0';
		END CASE;
	END PROCESS;
END Behavioral;